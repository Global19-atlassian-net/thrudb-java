/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.thrudb.thrudex;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Field implements TBase<Field._Fields>, java.io.Serializable, Cloneable, Comparable<Field> {
  private static final TStruct STRUCT_DESC = new TStruct("Field");

  private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
  private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)2);
  private static final TField STORE_FIELD_DESC = new TField("store", TType.BOOL, (short)3);
  private static final TField WEIGHT_FIELD_DESC = new TField("weight", TType.I32, (short)4);
  private static final TField SORTABLE_FIELD_DESC = new TField("sortable", TType.BOOL, (short)5);
  private static final TField ANALYZER_FIELD_DESC = new TField("analyzer", TType.I32, (short)6);

  public String key;
  public String value;
  public boolean store;
  public int weight;
  public boolean sortable;
  /**
   * 
   * @see Analyzer
   */
  public Analyzer analyzer;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    KEY((short)1, "key"),
    VALUE((short)2, "value"),
    STORE((short)3, "store"),
    WEIGHT((short)4, "weight"),
    SORTABLE((short)5, "sortable"),
    /**
     * 
     * @see Analyzer
     */
    ANALYZER((short)6, "analyzer");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STORE_ISSET_ID = 0;
  private static final int __WEIGHT_ISSET_ID = 1;
  private static final int __SORTABLE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.STORE, new FieldMetaData("store", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(_Fields.WEIGHT, new FieldMetaData("weight", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(_Fields.SORTABLE, new FieldMetaData("sortable", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(_Fields.ANALYZER, new FieldMetaData("analyzer", TFieldRequirementType.DEFAULT, 
        new EnumMetaData(TType.ENUM, Analyzer.class)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Field.class, metaDataMap);
  }

  public Field() {
    this.store = true;

    this.weight = 1;

    this.sortable = false;

    this.analyzer = Analyzer.STANDARD;

  }

  public Field(
    String key,
    String value,
    boolean store,
    int weight,
    boolean sortable,
    Analyzer analyzer)
  {
    this();
    this.key = key;
    this.value = value;
    this.store = store;
    setStoreIsSet(true);
    this.weight = weight;
    setWeightIsSet(true);
    this.sortable = sortable;
    setSortableIsSet(true);
    this.analyzer = analyzer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Field(Field other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    this.store = other.store;
    this.weight = other.weight;
    this.sortable = other.sortable;
    if (other.isSetAnalyzer()) {
      this.analyzer = other.analyzer;
    }
  }

  public Field deepCopy() {
    return new Field(this);
  }

  @Deprecated
  public Field clone() {
    return new Field(this);
  }

  public String getKey() {
    return this.key;
  }

  public Field setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been asigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public Field setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been asigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public boolean isStore() {
    return this.store;
  }

  public Field setStore(boolean store) {
    this.store = store;
    setStoreIsSet(true);
    return this;
  }

  public void unsetStore() {
    __isset_bit_vector.clear(__STORE_ISSET_ID);
  }

  /** Returns true if field store is set (has been asigned a value) and false otherwise */
  public boolean isSetStore() {
    return __isset_bit_vector.get(__STORE_ISSET_ID);
  }

  public void setStoreIsSet(boolean value) {
    __isset_bit_vector.set(__STORE_ISSET_ID, value);
  }

  public int getWeight() {
    return this.weight;
  }

  public Field setWeight(int weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bit_vector.clear(__WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been asigned a value) and false otherwise */
  public boolean isSetWeight() {
    return __isset_bit_vector.get(__WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bit_vector.set(__WEIGHT_ISSET_ID, value);
  }

  public boolean isSortable() {
    return this.sortable;
  }

  public Field setSortable(boolean sortable) {
    this.sortable = sortable;
    setSortableIsSet(true);
    return this;
  }

  public void unsetSortable() {
    __isset_bit_vector.clear(__SORTABLE_ISSET_ID);
  }

  /** Returns true if field sortable is set (has been asigned a value) and false otherwise */
  public boolean isSetSortable() {
    return __isset_bit_vector.get(__SORTABLE_ISSET_ID);
  }

  public void setSortableIsSet(boolean value) {
    __isset_bit_vector.set(__SORTABLE_ISSET_ID, value);
  }

  /**
   * 
   * @see Analyzer
   */
  public Analyzer getAnalyzer() {
    return this.analyzer;
  }

  /**
   * 
   * @see Analyzer
   */
  public Field setAnalyzer(Analyzer analyzer) {
    this.analyzer = analyzer;
    return this;
  }

  public void unsetAnalyzer() {
    this.analyzer = null;
  }

  /** Returns true if field analyzer is set (has been asigned a value) and false otherwise */
  public boolean isSetAnalyzer() {
    return this.analyzer != null;
  }

  public void setAnalyzerIsSet(boolean value) {
    if (!value) {
      this.analyzer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case STORE:
      if (value == null) {
        unsetStore();
      } else {
        setStore((Boolean)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Integer)value);
      }
      break;

    case SORTABLE:
      if (value == null) {
        unsetSortable();
      } else {
        setSortable((Boolean)value);
      }
      break;

    case ANALYZER:
      if (value == null) {
        unsetAnalyzer();
      } else {
        setAnalyzer((Analyzer)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case VALUE:
      return getValue();

    case STORE:
      return new Boolean(isStore());

    case WEIGHT:
      return new Integer(getWeight());

    case SORTABLE:
      return new Boolean(isSortable());

    case ANALYZER:
      return getAnalyzer();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case KEY:
      return isSetKey();
    case VALUE:
      return isSetValue();
    case STORE:
      return isSetStore();
    case WEIGHT:
      return isSetWeight();
    case SORTABLE:
      return isSetSortable();
    case ANALYZER:
      return isSetAnalyzer();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Field)
      return this.equals((Field)that);
    return false;
  }

  public boolean equals(Field that) {
    if (that == null)
      return false;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_store = true;
    boolean that_present_store = true;
    if (this_present_store || that_present_store) {
      if (!(this_present_store && that_present_store))
        return false;
      if (this.store != that.store)
        return false;
    }

    boolean this_present_weight = true;
    boolean that_present_weight = true;
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_sortable = true;
    boolean that_present_sortable = true;
    if (this_present_sortable || that_present_sortable) {
      if (!(this_present_sortable && that_present_sortable))
        return false;
      if (this.sortable != that.sortable)
        return false;
    }

    boolean this_present_analyzer = true && this.isSetAnalyzer();
    boolean that_present_analyzer = true && that.isSetAnalyzer();
    if (this_present_analyzer || that_present_analyzer) {
      if (!(this_present_analyzer && that_present_analyzer))
        return false;
      if (!this.analyzer.equals(that.analyzer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Field other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Field typedOther = (Field)other;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {      lastComparison = TBaseHelper.compareTo(value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStore()).compareTo(typedOther.isSetStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStore()) {      lastComparison = TBaseHelper.compareTo(store, typedOther.store);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {      lastComparison = TBaseHelper.compareTo(weight, typedOther.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortable()).compareTo(typedOther.isSetSortable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortable()) {      lastComparison = TBaseHelper.compareTo(sortable, typedOther.sortable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnalyzer()).compareTo(typedOther.isSetAnalyzer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalyzer()) {      lastComparison = TBaseHelper.compareTo(analyzer, typedOther.analyzer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // KEY
          if (field.type == TType.STRING) {
            this.key = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALUE
          if (field.type == TType.STRING) {
            this.value = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // STORE
          if (field.type == TType.BOOL) {
            this.store = iprot.readBool();
            setStoreIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // WEIGHT
          if (field.type == TType.I32) {
            this.weight = iprot.readI32();
            setWeightIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SORTABLE
          if (field.type == TType.BOOL) {
            this.sortable = iprot.readBool();
            setSortableIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ANALYZER
          if (field.type == TType.I32) {
            this.analyzer = Analyzer.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.key != null) {
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeString(this.key);
      oprot.writeFieldEnd();
    }
    if (this.value != null) {
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeString(this.value);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STORE_FIELD_DESC);
    oprot.writeBool(this.store);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
    oprot.writeI32(this.weight);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SORTABLE_FIELD_DESC);
    oprot.writeBool(this.sortable);
    oprot.writeFieldEnd();
    if (this.analyzer != null) {
      oprot.writeFieldBegin(ANALYZER_FIELD_DESC);
      oprot.writeI32(this.analyzer.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Field(");
    boolean first = true;

    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      sb.append(this.value);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("store:");
    sb.append(this.store);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weight:");
    sb.append(this.weight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortable:");
    sb.append(this.sortable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("analyzer:");
    if (this.analyzer == null) {
      sb.append("null");
    } else {
      sb.append(this.analyzer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

