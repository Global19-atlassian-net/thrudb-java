/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.thrudb;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Thrudb {

  /**
   * Base service calls all thrudb services must implement.
   * 
   * Primarily for KPI and Replication purposes.
   * 
   */
  public interface Iface {

    /**
     * 
     * Lists the names of the servers currently running
     */
    public List<String> getAvailibleServers() throws TException;

    /**
     * 
     * Changes the replication factor for a given bucket
     * 
     * 
     * @param bucket
     * @param factor
     */
    public void setReplicationFactor(String bucket, int factor) throws TException;

    /**
     * 
     * Changes the partition factor for a given bucket
     * 
     * 
     * @param bucket
     * @param factor
     */
    public void setPartitionFactor(String bucket, int factor) throws TException;

    /**
     * <pre>
     * Retrieves a map of data about this service.
     * 
     * There are many kinds of data:
     * 
     * Service call counts -
     *                      All keys will start with "mc_", example: "mc_get"
     *                      All values will represent number of times invoked
     * 
     * Service call message sizes -
     *                      All keys will start with "ms_"
     *                      All values will represent total bytes received
     * 
     * Service memory/cpu usage, uptime and health -
     *                      key:"heap",  value:heapsize in kb
     *                      key:"cpu",   value:0-100 representing %cpu
     *                      key:"uptime",value:seconds since start
     * 
     * 
     * Note, this data is ephemeral so if the service is restarted the previous
     * stats are lost.</pre>
     */
    public Map<String,Long> getServiceStats() throws TException;

    /**
     * Acts as a noop, for debug and monitoring purposes.
     */
    public void ping() throws TException;

    /**
     * <pre>Will return a number of binary requests from the redo logs.
     * 
     * @param lsn
     *            The log sequence number to start from (inclusive)
     * @param kbLimit
     *                        The max response size of the messages (not strict)</pre>
     * 
     * @param bucket
     * @param lsn
     * @param kbLimit
     */
    public List<LogEntry> getLogSince(String bucket, String lsn, int kbLimit) throws TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public List<String> getAvailibleServers() throws TException
    {
      send_getAvailibleServers();
      return recv_getAvailibleServers();
    }

    public void send_getAvailibleServers() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAvailibleServers", TMessageType.CALL, seqid_));
      getAvailibleServers_args args = new getAvailibleServers_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<String> recv_getAvailibleServers() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getAvailibleServers_result result = new getAvailibleServers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAvailibleServers failed: unknown result");
    }

    public void setReplicationFactor(String bucket, int factor) throws TException
    {
      send_setReplicationFactor(bucket, factor);
      recv_setReplicationFactor();
    }

    public void send_setReplicationFactor(String bucket, int factor) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setReplicationFactor", TMessageType.CALL, seqid_));
      setReplicationFactor_args args = new setReplicationFactor_args();
      args.bucket = bucket;
      args.factor = factor;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_setReplicationFactor() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      setReplicationFactor_result result = new setReplicationFactor_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void setPartitionFactor(String bucket, int factor) throws TException
    {
      send_setPartitionFactor(bucket, factor);
      recv_setPartitionFactor();
    }

    public void send_setPartitionFactor(String bucket, int factor) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setPartitionFactor", TMessageType.CALL, seqid_));
      setPartitionFactor_args args = new setPartitionFactor_args();
      args.bucket = bucket;
      args.factor = factor;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_setPartitionFactor() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      setPartitionFactor_result result = new setPartitionFactor_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public Map<String,Long> getServiceStats() throws TException
    {
      send_getServiceStats();
      return recv_getServiceStats();
    }

    public void send_getServiceStats() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getServiceStats", TMessageType.CALL, seqid_));
      getServiceStats_args args = new getServiceStats_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<String,Long> recv_getServiceStats() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getServiceStats_result result = new getServiceStats_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getServiceStats failed: unknown result");
    }

    public void ping() throws TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("ping", TMessageType.CALL, seqid_));
      ping_args args = new ping_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_ping() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      ping_result result = new ping_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public List<LogEntry> getLogSince(String bucket, String lsn, int kbLimit) throws TException
    {
      send_getLogSince(bucket, lsn, kbLimit);
      return recv_getLogSince();
    }

    public void send_getLogSince(String bucket, String lsn, int kbLimit) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLogSince", TMessageType.CALL, seqid_));
      getLogSince_args args = new getLogSince_args();
      args.bucket = bucket;
      args.lsn = lsn;
      args.kbLimit = kbLimit;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<LogEntry> recv_getLogSince() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getLogSince_result result = new getLogSince_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLogSince failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getAvailibleServers", new getAvailibleServers());
      processMap_.put("setReplicationFactor", new setReplicationFactor());
      processMap_.put("setPartitionFactor", new setPartitionFactor());
      processMap_.put("getServiceStats", new getServiceStats());
      processMap_.put("ping", new ping());
      processMap_.put("getLogSince", new getLogSince());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getAvailibleServers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAvailibleServers_args args = new getAvailibleServers_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getAvailibleServers_result result = new getAvailibleServers_result();
        result.success = iface_.getAvailibleServers();
        oprot.writeMessageBegin(new TMessage("getAvailibleServers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setReplicationFactor implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setReplicationFactor_args args = new setReplicationFactor_args();
        args.read(iprot);
        iprot.readMessageEnd();
        setReplicationFactor_result result = new setReplicationFactor_result();
        iface_.setReplicationFactor(args.bucket, args.factor);
        oprot.writeMessageBegin(new TMessage("setReplicationFactor", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setPartitionFactor implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setPartitionFactor_args args = new setPartitionFactor_args();
        args.read(iprot);
        iprot.readMessageEnd();
        setPartitionFactor_result result = new setPartitionFactor_result();
        iface_.setPartitionFactor(args.bucket, args.factor);
        oprot.writeMessageBegin(new TMessage("setPartitionFactor", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getServiceStats implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getServiceStats_args args = new getServiceStats_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getServiceStats_result result = new getServiceStats_result();
        result.success = iface_.getServiceStats();
        oprot.writeMessageBegin(new TMessage("getServiceStats", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class ping implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        ping_args args = new ping_args();
        args.read(iprot);
        iprot.readMessageEnd();
        ping_result result = new ping_result();
        iface_.ping();
        oprot.writeMessageBegin(new TMessage("ping", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLogSince implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLogSince_args args = new getLogSince_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getLogSince_result result = new getLogSince_result();
        result.success = iface_.getLogSince(args.bucket, args.lsn, args.kbLimit);
        oprot.writeMessageBegin(new TMessage("getLogSince", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getAvailibleServers_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAvailibleServers_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getAvailibleServers_args.class, metaDataMap);
    }

    public getAvailibleServers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAvailibleServers_args(getAvailibleServers_args other) {
    }

    @Override
    public getAvailibleServers_args clone() {
      return new getAvailibleServers_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAvailibleServers_args)
        return this.equals((getAvailibleServers_args)that);
      return false;
    }

    public boolean equals(getAvailibleServers_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAvailibleServers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getAvailibleServers_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getAvailibleServers_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    public List<String> success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getAvailibleServers_result.class, metaDataMap);
    }

    public getAvailibleServers_result() {
    }

    public getAvailibleServers_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAvailibleServers_result(getAvailibleServers_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    @Override
    public getAvailibleServers_result clone() {
      return new getAvailibleServers_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAvailibleServers_result)
        return this.equals((getAvailibleServers_result)that);
      return false;
    }

    public boolean equals(getAvailibleServers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  this.success.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (String _iter3 : this.success)          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAvailibleServers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class setReplicationFactor_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setReplicationFactor_args");
    private static final TField BUCKET_FIELD_DESC = new TField("bucket", TType.STRING, (short)1);
    private static final TField FACTOR_FIELD_DESC = new TField("factor", TType.I32, (short)2);

    public String bucket;
    public static final int BUCKET = 1;
    public int factor;
    public static final int FACTOR = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean factor = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BUCKET, new FieldMetaData("bucket", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FACTOR, new FieldMetaData("factor", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(setReplicationFactor_args.class, metaDataMap);
    }

    public setReplicationFactor_args() {
    }

    public setReplicationFactor_args(
      String bucket,
      int factor)
    {
      this();
      this.bucket = bucket;
      this.factor = factor;
      this.__isset.factor = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setReplicationFactor_args(setReplicationFactor_args other) {
      if (other.isSetBucket()) {
        this.bucket = other.bucket;
      }
      __isset.factor = other.__isset.factor;
      this.factor = other.factor;
    }

    @Override
    public setReplicationFactor_args clone() {
      return new setReplicationFactor_args(this);
    }

    public String getBucket() {
      return this.bucket;
    }

    public void setBucket(String bucket) {
      this.bucket = bucket;
    }

    public void unsetBucket() {
      this.bucket = null;
    }

    // Returns true if field bucket is set (has been asigned a value) and false otherwise
    public boolean isSetBucket() {
      return this.bucket != null;
    }

    public void setBucketIsSet(boolean value) {
      if (!value) {
        this.bucket = null;
      }
    }

    public int getFactor() {
      return this.factor;
    }

    public void setFactor(int factor) {
      this.factor = factor;
      this.__isset.factor = true;
    }

    public void unsetFactor() {
      this.__isset.factor = false;
    }

    // Returns true if field factor is set (has been asigned a value) and false otherwise
    public boolean isSetFactor() {
      return this.__isset.factor;
    }

    public void setFactorIsSet(boolean value) {
      this.__isset.factor = value;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BUCKET:
        if (value == null) {
          unsetBucket();
        } else {
          setBucket((String)value);
        }
        break;

      case FACTOR:
        if (value == null) {
          unsetFactor();
        } else {
          setFactor((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BUCKET:
        return getBucket();

      case FACTOR:
        return new Integer(getFactor());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BUCKET:
        return isSetBucket();
      case FACTOR:
        return isSetFactor();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setReplicationFactor_args)
        return this.equals((setReplicationFactor_args)that);
      return false;
    }

    public boolean equals(setReplicationFactor_args that) {
      if (that == null)
        return false;

      boolean this_present_bucket = true && this.isSetBucket();
      boolean that_present_bucket = true && that.isSetBucket();
      if (this_present_bucket || that_present_bucket) {
        if (!(this_present_bucket && that_present_bucket))
          return false;
        if (!this.bucket.equals(that.bucket))
          return false;
      }

      boolean this_present_factor = true;
      boolean that_present_factor = true;
      if (this_present_factor || that_present_factor) {
        if (!(this_present_factor && that_present_factor))
          return false;
        if (this.factor != that.factor)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BUCKET:
            if (field.type == TType.STRING) {
              this.bucket = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FACTOR:
            if (field.type == TType.I32) {
              this.factor = iprot.readI32();
              this.__isset.factor = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.bucket != null) {
        oprot.writeFieldBegin(BUCKET_FIELD_DESC);
        oprot.writeString(this.bucket);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FACTOR_FIELD_DESC);
      oprot.writeI32(this.factor);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setReplicationFactor_args(");
      boolean first = true;

      sb.append("bucket:");
      if (this.bucket == null) {
        sb.append("null");
      } else {
        sb.append(this.bucket);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("factor:");
      sb.append(this.factor);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class setReplicationFactor_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setReplicationFactor_result");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(setReplicationFactor_result.class, metaDataMap);
    }

    public setReplicationFactor_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setReplicationFactor_result(setReplicationFactor_result other) {
    }

    @Override
    public setReplicationFactor_result clone() {
      return new setReplicationFactor_result(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setReplicationFactor_result)
        return this.equals((setReplicationFactor_result)that);
      return false;
    }

    public boolean equals(setReplicationFactor_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setReplicationFactor_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class setPartitionFactor_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setPartitionFactor_args");
    private static final TField BUCKET_FIELD_DESC = new TField("bucket", TType.STRING, (short)1);
    private static final TField FACTOR_FIELD_DESC = new TField("factor", TType.I32, (short)2);

    public String bucket;
    public static final int BUCKET = 1;
    public int factor;
    public static final int FACTOR = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean factor = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BUCKET, new FieldMetaData("bucket", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(FACTOR, new FieldMetaData("factor", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(setPartitionFactor_args.class, metaDataMap);
    }

    public setPartitionFactor_args() {
    }

    public setPartitionFactor_args(
      String bucket,
      int factor)
    {
      this();
      this.bucket = bucket;
      this.factor = factor;
      this.__isset.factor = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPartitionFactor_args(setPartitionFactor_args other) {
      if (other.isSetBucket()) {
        this.bucket = other.bucket;
      }
      __isset.factor = other.__isset.factor;
      this.factor = other.factor;
    }

    @Override
    public setPartitionFactor_args clone() {
      return new setPartitionFactor_args(this);
    }

    public String getBucket() {
      return this.bucket;
    }

    public void setBucket(String bucket) {
      this.bucket = bucket;
    }

    public void unsetBucket() {
      this.bucket = null;
    }

    // Returns true if field bucket is set (has been asigned a value) and false otherwise
    public boolean isSetBucket() {
      return this.bucket != null;
    }

    public void setBucketIsSet(boolean value) {
      if (!value) {
        this.bucket = null;
      }
    }

    public int getFactor() {
      return this.factor;
    }

    public void setFactor(int factor) {
      this.factor = factor;
      this.__isset.factor = true;
    }

    public void unsetFactor() {
      this.__isset.factor = false;
    }

    // Returns true if field factor is set (has been asigned a value) and false otherwise
    public boolean isSetFactor() {
      return this.__isset.factor;
    }

    public void setFactorIsSet(boolean value) {
      this.__isset.factor = value;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BUCKET:
        if (value == null) {
          unsetBucket();
        } else {
          setBucket((String)value);
        }
        break;

      case FACTOR:
        if (value == null) {
          unsetFactor();
        } else {
          setFactor((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BUCKET:
        return getBucket();

      case FACTOR:
        return new Integer(getFactor());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BUCKET:
        return isSetBucket();
      case FACTOR:
        return isSetFactor();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPartitionFactor_args)
        return this.equals((setPartitionFactor_args)that);
      return false;
    }

    public boolean equals(setPartitionFactor_args that) {
      if (that == null)
        return false;

      boolean this_present_bucket = true && this.isSetBucket();
      boolean that_present_bucket = true && that.isSetBucket();
      if (this_present_bucket || that_present_bucket) {
        if (!(this_present_bucket && that_present_bucket))
          return false;
        if (!this.bucket.equals(that.bucket))
          return false;
      }

      boolean this_present_factor = true;
      boolean that_present_factor = true;
      if (this_present_factor || that_present_factor) {
        if (!(this_present_factor && that_present_factor))
          return false;
        if (this.factor != that.factor)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BUCKET:
            if (field.type == TType.STRING) {
              this.bucket = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FACTOR:
            if (field.type == TType.I32) {
              this.factor = iprot.readI32();
              this.__isset.factor = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.bucket != null) {
        oprot.writeFieldBegin(BUCKET_FIELD_DESC);
        oprot.writeString(this.bucket);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FACTOR_FIELD_DESC);
      oprot.writeI32(this.factor);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPartitionFactor_args(");
      boolean first = true;

      sb.append("bucket:");
      if (this.bucket == null) {
        sb.append("null");
      } else {
        sb.append(this.bucket);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("factor:");
      sb.append(this.factor);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class setPartitionFactor_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("setPartitionFactor_result");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(setPartitionFactor_result.class, metaDataMap);
    }

    public setPartitionFactor_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPartitionFactor_result(setPartitionFactor_result other) {
    }

    @Override
    public setPartitionFactor_result clone() {
      return new setPartitionFactor_result(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPartitionFactor_result)
        return this.equals((setPartitionFactor_result)that);
      return false;
    }

    public boolean equals(setPartitionFactor_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPartitionFactor_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getServiceStats_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getServiceStats_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getServiceStats_args.class, metaDataMap);
    }

    public getServiceStats_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServiceStats_args(getServiceStats_args other) {
    }

    @Override
    public getServiceStats_args clone() {
      return new getServiceStats_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServiceStats_args)
        return this.equals((getServiceStats_args)that);
      return false;
    }

    public boolean equals(getServiceStats_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServiceStats_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getServiceStats_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getServiceStats_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);

    public Map<String,Long> success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.I64))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getServiceStats_result.class, metaDataMap);
    }

    public getServiceStats_result() {
    }

    public getServiceStats_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServiceStats_result(getServiceStats_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Long other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Long __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    @Override
    public getServiceStats_result clone() {
      return new getServiceStats_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<String,Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServiceStats_result)
        return this.equals((getServiceStats_result)that);
      return false;
    }

    public boolean equals(getServiceStats_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.MAP) {
              {
                TMap _map4 = iprot.readMapBegin();
                this.success = new HashMap<String,Long>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  String _key6;
                  long _val7;
                  _key6 = iprot.readString();
                  _val7 = iprot.readI64();
                  this.success.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.success.size()));
          for (Map.Entry<String, Long> _iter8 : this.success.entrySet())          {
            oprot.writeString(_iter8.getKey());
            oprot.writeI64(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServiceStats_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class ping_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("ping_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    @Override
    public ping_args clone() {
      return new ping_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class ping_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("ping_result");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    @Override
    public ping_result clone() {
      return new ping_result(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getLogSince_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getLogSince_args");
    private static final TField BUCKET_FIELD_DESC = new TField("bucket", TType.STRING, (short)1);
    private static final TField LSN_FIELD_DESC = new TField("lsn", TType.STRING, (short)2);
    private static final TField KB_LIMIT_FIELD_DESC = new TField("kbLimit", TType.I32, (short)3);

    public String bucket;
    public static final int BUCKET = 1;
    public String lsn;
    public static final int LSN = 2;
    public int kbLimit;
    public static final int KBLIMIT = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean kbLimit = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BUCKET, new FieldMetaData("bucket", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(LSN, new FieldMetaData("lsn", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(KBLIMIT, new FieldMetaData("kbLimit", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getLogSince_args.class, metaDataMap);
    }

    public getLogSince_args() {
    }

    public getLogSince_args(
      String bucket,
      String lsn,
      int kbLimit)
    {
      this();
      this.bucket = bucket;
      this.lsn = lsn;
      this.kbLimit = kbLimit;
      this.__isset.kbLimit = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSince_args(getLogSince_args other) {
      if (other.isSetBucket()) {
        this.bucket = other.bucket;
      }
      if (other.isSetLsn()) {
        this.lsn = other.lsn;
      }
      __isset.kbLimit = other.__isset.kbLimit;
      this.kbLimit = other.kbLimit;
    }

    @Override
    public getLogSince_args clone() {
      return new getLogSince_args(this);
    }

    public String getBucket() {
      return this.bucket;
    }

    public void setBucket(String bucket) {
      this.bucket = bucket;
    }

    public void unsetBucket() {
      this.bucket = null;
    }

    // Returns true if field bucket is set (has been asigned a value) and false otherwise
    public boolean isSetBucket() {
      return this.bucket != null;
    }

    public void setBucketIsSet(boolean value) {
      if (!value) {
        this.bucket = null;
      }
    }

    public String getLsn() {
      return this.lsn;
    }

    public void setLsn(String lsn) {
      this.lsn = lsn;
    }

    public void unsetLsn() {
      this.lsn = null;
    }

    // Returns true if field lsn is set (has been asigned a value) and false otherwise
    public boolean isSetLsn() {
      return this.lsn != null;
    }

    public void setLsnIsSet(boolean value) {
      if (!value) {
        this.lsn = null;
      }
    }

    public int getKbLimit() {
      return this.kbLimit;
    }

    public void setKbLimit(int kbLimit) {
      this.kbLimit = kbLimit;
      this.__isset.kbLimit = true;
    }

    public void unsetKbLimit() {
      this.__isset.kbLimit = false;
    }

    // Returns true if field kbLimit is set (has been asigned a value) and false otherwise
    public boolean isSetKbLimit() {
      return this.__isset.kbLimit;
    }

    public void setKbLimitIsSet(boolean value) {
      this.__isset.kbLimit = value;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BUCKET:
        if (value == null) {
          unsetBucket();
        } else {
          setBucket((String)value);
        }
        break;

      case LSN:
        if (value == null) {
          unsetLsn();
        } else {
          setLsn((String)value);
        }
        break;

      case KBLIMIT:
        if (value == null) {
          unsetKbLimit();
        } else {
          setKbLimit((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BUCKET:
        return getBucket();

      case LSN:
        return getLsn();

      case KBLIMIT:
        return new Integer(getKbLimit());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BUCKET:
        return isSetBucket();
      case LSN:
        return isSetLsn();
      case KBLIMIT:
        return isSetKbLimit();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSince_args)
        return this.equals((getLogSince_args)that);
      return false;
    }

    public boolean equals(getLogSince_args that) {
      if (that == null)
        return false;

      boolean this_present_bucket = true && this.isSetBucket();
      boolean that_present_bucket = true && that.isSetBucket();
      if (this_present_bucket || that_present_bucket) {
        if (!(this_present_bucket && that_present_bucket))
          return false;
        if (!this.bucket.equals(that.bucket))
          return false;
      }

      boolean this_present_lsn = true && this.isSetLsn();
      boolean that_present_lsn = true && that.isSetLsn();
      if (this_present_lsn || that_present_lsn) {
        if (!(this_present_lsn && that_present_lsn))
          return false;
        if (!this.lsn.equals(that.lsn))
          return false;
      }

      boolean this_present_kbLimit = true;
      boolean that_present_kbLimit = true;
      if (this_present_kbLimit || that_present_kbLimit) {
        if (!(this_present_kbLimit && that_present_kbLimit))
          return false;
        if (this.kbLimit != that.kbLimit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BUCKET:
            if (field.type == TType.STRING) {
              this.bucket = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LSN:
            if (field.type == TType.STRING) {
              this.lsn = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case KBLIMIT:
            if (field.type == TType.I32) {
              this.kbLimit = iprot.readI32();
              this.__isset.kbLimit = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.bucket != null) {
        oprot.writeFieldBegin(BUCKET_FIELD_DESC);
        oprot.writeString(this.bucket);
        oprot.writeFieldEnd();
      }
      if (this.lsn != null) {
        oprot.writeFieldBegin(LSN_FIELD_DESC);
        oprot.writeString(this.lsn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KB_LIMIT_FIELD_DESC);
      oprot.writeI32(this.kbLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSince_args(");
      boolean first = true;

      sb.append("bucket:");
      if (this.bucket == null) {
        sb.append("null");
      } else {
        sb.append(this.bucket);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lsn:");
      if (this.lsn == null) {
        sb.append("null");
      } else {
        sb.append(this.lsn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("kbLimit:");
      sb.append(this.kbLimit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getLogSince_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getLogSince_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);

    public List<LogEntry> success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, LogEntry.class))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getLogSince_result.class, metaDataMap);
    }

    public getLogSince_result() {
    }

    public getLogSince_result(
      List<LogEntry> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLogSince_result(getLogSince_result other) {
      if (other.isSetSuccess()) {
        List<LogEntry> __this__success = new ArrayList<LogEntry>();
        for (LogEntry other_element : other.success) {
          __this__success.add(new LogEntry(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getLogSince_result clone() {
      return new getLogSince_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LogEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LogEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<LogEntry>();
      }
      this.success.add(elem);
    }

    public List<LogEntry> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<LogEntry> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LogEntry>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLogSince_result)
        return this.equals((getLogSince_result)that);
      return false;
    }

    public boolean equals(getLogSince_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.LIST) {
              {
                TList _list9 = iprot.readListBegin();
                this.success = new ArrayList<LogEntry>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  LogEntry _elem11;
                  _elem11 = new LogEntry();
                  _elem11.read(iprot);
                  this.success.add(_elem11);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (LogEntry _iter12 : this.success)          {
            _iter12.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLogSince_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
