/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.thrudb;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * <pre>Represents a single log entry.
 * 
 * This is captured off the wire so is the in the Thrift protocol used
 * during transfer
 * 
 * @lsn     - the log sequence number of the message
 * @message - the message itself.</pre>
 */
public class logEntry implements TBase, java.io.Serializable, Cloneable, Comparable<logEntry> {
  private static final TStruct STRUCT_DESC = new TStruct("logEntry");
  private static final TField BUCKET_FIELD_DESC = new TField("bucket", TType.STRING, (short)1);
  private static final TField LSN_FIELD_DESC = new TField("lsn", TType.STRING, (short)2);
  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)3);

  public String bucket;
  public String lsn;
  public byte[] message;
  public static final int BUCKET = 1;
  public static final int LSN = 2;
  public static final int MESSAGE = 3;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(BUCKET, new FieldMetaData("bucket", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(LSN, new FieldMetaData("lsn", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(MESSAGE, new FieldMetaData("message", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(logEntry.class, metaDataMap);
  }

  public logEntry() {
  }

  public logEntry(
    String bucket,
    String lsn,
    byte[] message)
  {
    this();
    this.bucket = bucket;
    this.lsn = lsn;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public logEntry(logEntry other) {
    if (other.isSetBucket()) {
      this.bucket = other.bucket;
    }
    if (other.isSetLsn()) {
      this.lsn = other.lsn;
    }
    if (other.isSetMessage()) {
      this.message = new byte[other.message.length];
      System.arraycopy(other.message, 0, message, 0, other.message.length);
    }
  }

  public logEntry deepCopy() {
    return new logEntry(this);
  }

  @Deprecated
  public logEntry clone() {
    return new logEntry(this);
  }

  public String getBucket() {
    return this.bucket;
  }

  public logEntry setBucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  public void unsetBucket() {
    this.bucket = null;
  }

  // Returns true if field bucket is set (has been asigned a value) and false otherwise
  public boolean isSetBucket() {
    return this.bucket != null;
  }

  public void setBucketIsSet(boolean value) {
    if (!value) {
      this.bucket = null;
    }
  }

  public String getLsn() {
    return this.lsn;
  }

  public logEntry setLsn(String lsn) {
    this.lsn = lsn;
    return this;
  }

  public void unsetLsn() {
    this.lsn = null;
  }

  // Returns true if field lsn is set (has been asigned a value) and false otherwise
  public boolean isSetLsn() {
    return this.lsn != null;
  }

  public void setLsnIsSet(boolean value) {
    if (!value) {
      this.lsn = null;
    }
  }

  public byte[] getMessage() {
    return this.message;
  }

  public logEntry setMessage(byte[] message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  // Returns true if field message is set (has been asigned a value) and false otherwise
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case BUCKET:
      if (value == null) {
        unsetBucket();
      } else {
        setBucket((String)value);
      }
      break;

    case LSN:
      if (value == null) {
        unsetLsn();
      } else {
        setLsn((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case BUCKET:
      return getBucket();

    case LSN:
      return getLsn();

    case MESSAGE:
      return getMessage();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case BUCKET:
      return isSetBucket();
    case LSN:
      return isSetLsn();
    case MESSAGE:
      return isSetMessage();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof logEntry)
      return this.equals((logEntry)that);
    return false;
  }

  public boolean equals(logEntry that) {
    if (that == null)
      return false;

    boolean this_present_bucket = true && this.isSetBucket();
    boolean that_present_bucket = true && that.isSetBucket();
    if (this_present_bucket || that_present_bucket) {
      if (!(this_present_bucket && that_present_bucket))
        return false;
      if (!this.bucket.equals(that.bucket))
        return false;
    }

    boolean this_present_lsn = true && this.isSetLsn();
    boolean that_present_lsn = true && that.isSetLsn();
    if (this_present_lsn || that_present_lsn) {
      if (!(this_present_lsn && that_present_lsn))
        return false;
      if (!this.lsn.equals(that.lsn))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!java.util.Arrays.equals(this.message, that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(logEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    logEntry typedOther = (logEntry)other;

    lastComparison = Boolean.valueOf(isSetBucket()).compareTo(isSetBucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(bucket, typedOther.bucket);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLsn()).compareTo(isSetLsn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(lsn, typedOther.lsn);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(message, typedOther.message);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case BUCKET:
          if (field.type == TType.STRING) {
            this.bucket = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LSN:
          if (field.type == TType.STRING) {
            this.lsn = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGE:
          if (field.type == TType.STRING) {
            this.message = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.bucket != null) {
      oprot.writeFieldBegin(BUCKET_FIELD_DESC);
      oprot.writeString(this.bucket);
      oprot.writeFieldEnd();
    }
    if (this.lsn != null) {
      oprot.writeFieldBegin(LSN_FIELD_DESC);
      oprot.writeString(this.lsn);
      oprot.writeFieldEnd();
    }
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      oprot.writeBinary(this.message);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("logEntry(");
    boolean first = true;

    sb.append("bucket:");
    if (this.bucket == null) {
      sb.append("null");
    } else {
      sb.append(this.bucket);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lsn:");
    if (this.lsn == null) {
      sb.append("null");
    } else {
      sb.append(this.lsn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
        int __message_size = Math.min(this.message.length, 128);
        for (int i = 0; i < __message_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.message[i]).length() > 1 ? Integer.toHexString(this.message[i]).substring(Integer.toHexString(this.message[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.message[i]).toUpperCase());
        }
        if (this.message.length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

